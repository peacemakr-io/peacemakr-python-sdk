# coding: utf-8

"""
    Peacemakr

    This API describes the Peacemakr services, which enable seamless application layer encryption and verification.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from peacemakr.generated.models.contact import Contact  # noqa: F401,E501
from peacemakr.generated.models.manual_auth_n_parameters import ManualAuthNParameters  # noqa: F401,E501
from peacemakr.generated.models.oidc_auth_n_parameters import OIDCAuthNParameters  # noqa: F401,E501


class AddOrganizationParameters(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'oidc_params': 'list[OIDCAuthNParameters]',
        'manual_params': 'list[ManualAuthNParameters]',
        'contact': 'Contact'
    }

    attribute_map = {
        'oidc_params': 'oidcParams',
        'manual_params': 'manualParams',
        'contact': 'contact'
    }

    def __init__(self, oidc_params=None, manual_params=None, contact=None):  # noqa: E501
        """AddOrganizationParameters - a model defined in Swagger"""  # noqa: E501

        self._oidc_params = None
        self._manual_params = None
        self._contact = None
        self.discriminator = None

        if oidc_params is not None:
            self.oidc_params = oidc_params
        if manual_params is not None:
            self.manual_params = manual_params
        self.contact = contact

    @property
    def oidc_params(self):
        """Gets the oidc_params of this AddOrganizationParameters.  # noqa: E501


        :return: The oidc_params of this AddOrganizationParameters.  # noqa: E501
        :rtype: list[OIDCAuthNParameters]
        """
        return self._oidc_params

    @oidc_params.setter
    def oidc_params(self, oidc_params):
        """Sets the oidc_params of this AddOrganizationParameters.


        :param oidc_params: The oidc_params of this AddOrganizationParameters.  # noqa: E501
        :type: list[OIDCAuthNParameters]
        """

        self._oidc_params = oidc_params

    @property
    def manual_params(self):
        """Gets the manual_params of this AddOrganizationParameters.  # noqa: E501


        :return: The manual_params of this AddOrganizationParameters.  # noqa: E501
        :rtype: list[ManualAuthNParameters]
        """
        return self._manual_params

    @manual_params.setter
    def manual_params(self, manual_params):
        """Sets the manual_params of this AddOrganizationParameters.


        :param manual_params: The manual_params of this AddOrganizationParameters.  # noqa: E501
        :type: list[ManualAuthNParameters]
        """

        self._manual_params = manual_params

    @property
    def contact(self):
        """Gets the contact of this AddOrganizationParameters.  # noqa: E501


        :return: The contact of this AddOrganizationParameters.  # noqa: E501
        :rtype: Contact
        """
        return self._contact

    @contact.setter
    def contact(self, contact):
        """Sets the contact of this AddOrganizationParameters.


        :param contact: The contact of this AddOrganizationParameters.  # noqa: E501
        :type: Contact
        """
        if contact is None:
            raise ValueError("Invalid value for `contact`, must not be `None`")  # noqa: E501

        self._contact = contact

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AddOrganizationParameters, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AddOrganizationParameters):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
