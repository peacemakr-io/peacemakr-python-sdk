# coding: utf-8

"""
    Peacemakr

    This API describes the Peacemakr services, which enable seamless application layer encryption and verification.  # noqa: E501

    OpenAPI spec version: 1.0.0

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from setuptools import setup, find_packages  # noqa: H301
import setuptools.command.build_py
import distutils.cmd
import distutils.log
import subprocess
import setuptools
import sys
import os
import shutil
import platform

NAME = "peacemakr-sdk"
VERSION = "0.0.1"
# To install the library, run the following
#
# python setup.py install
#
# prerequisite: setuptools
# http://pypi.python.org/pypi/setuptools

REQUIRES = [
    "certifi>=2017.4.17",
    "python-dateutil>=2.1",
    "six>=1.10",
    "urllib3>=1.23"
]

CORE_CRYPTO_URL_BASE="https://github.com/peacemakr-io/peacemakr-core-crypto/releases/download/"
CORE_CRYPTO_VERSION="v0.2.0/"

class InstallCoreCryptoCommand(distutils.cmd.Command):
  """A custom command to run Pylint on all Python source files."""

  description = 'run Pylint on Python source files'
  user_options = []
  def initialize_options(self):
    """Set default values for options."""
    pass

  def finalize_options(self):
    """Post-process options."""
    pass

  def _execute_command(self, command):
      subprocess.run(command)

  def _get_core_crypto_link(self):
      # TODO: Detect different python version
      os_type = sys.platform
      machine_type = platform.machine()

      if os_type == "darwin" and machine_type == "x86_64":
          return self._get_macos_core_crypto_link()
        
      if os_type == "linux" and machine_type == "x86_64":
          # TODO: detect Ubuntu only!
          return self._get_ubuntu_core_crypto_link()
          
      sys.exit("Error: OS not supported. We only support Ubuntu and MacOS at the moment.")

  def _get_macos_core_crypto_link(self):
      return CORE_CRYPTO_URL_BASE + CORE_CRYPTO_VERSION + "peacemakr-core-crypto-python-macos-x86_64.tar.gz"

  def _get_ubuntu_core_crypto_link(self):
      return CORE_CRYPTO_URL_BASE + CORE_CRYPTO_VERSION + "peacemakr-core-crypto-python-ubuntu-x86_64.tar.gz"


  def run(self):
    """Run command."""
    site_package_dir = next(p for p in sys.path if 'site-packages' in p)
    core_crypto_link = self._get_core_crypto_link()
    get_command = "wget -q " + core_crypto_link
    unzip_command = "tar -zxvf peacemakr-core-crypto-python-macos-x86_64.tar.gz"
    
    self._execute_command(get_command.split(" "))
    self._execute_command(unzip_command.split(" "))

    # copying file
    shutil.copyfile("peacemakr_core_crypto_python.cpython-37m-darwin.so", site_package_dir+"/peacemakr_core_crypto_python.cpython-37m-darwin.so")
    shutil.copyfile("lib/libpeacemakr-core-crypto.dylib", "/usr/local/lib/libpeacemakr-core-crypto.dylib")
    shutil.copyfile("lib/libpeacemakr-core-crypto-cpp.dylib", "/usr/local/lib/libpeacemakr-core-crypto-cpp.dylib")



class BuildPyCommand(setuptools.command.build_py.build_py):
  """Custom build command."""

  def run(self):
    self.run_command('install_core_crypto')
    setuptools.command.build_py.build_py.run(self)

setup(
    cmdclass={
        'install_core_crypto': InstallCoreCryptoCommand,
        'build_py': BuildPyCommand,
    },
    name=NAME,
    version=VERSION,
    description="Peacemakr",
    author_email="",
    url="",
    keywords=["Peacemakr"],
    install_requires=REQUIRES,
    packages=find_packages(),
    include_package_data=True,
    long_description="""\
    This API describes the Peacemakr services, which enable seamless application layer encryption and verification.  # noqa: E501
    """
)
